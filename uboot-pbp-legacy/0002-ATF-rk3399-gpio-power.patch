From 8d35b4156054fc6e9cc8d65324d4607670394b45 Mon Sep 17 00:00:00 2001
From: Jona Stubbe <tf-a@jona-stubbe.de>
Date: Tue, 22 Dec 2020 13:58:56 +0100
Subject: plat/rockchip/rk3399: mux out any GPIO used for poweroff and reset

The Pinebook Pro and RockPro64 use GPIO1A6, the TSADC thermal shutdown pin
as a hard reset signal. The previous code accounted for this kind of use,
but only for poweroff, not reset, and only for GPIO1A6. Add a GPIO IOMUX
function that can be used for all GPIOs and use it in poweroff and reset.

Signed-off-by: Jona Stubbe <tf-a@jona-stubbe.de>
Change-Id: I4468e2998212b3ac6db08caf59e0c4224fcfb24c
Signed-off-by: Jimmy Brisson <jimmy.brisson@arm.com>
---
 plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.c | 23 +++++++++++++++++++++++
 plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.h | 12 ++++++++++++
 plat/rockchip/rk3399/drivers/pmu/pmu.c          | 20 ++++++++------------
 plat/rockchip/rk3399/drivers/soc/soc.h          |  4 ++++
 plat/rockchip/rk3399/include/shared/pmu_regs.h  |  4 +---
 plat/rockchip/rk3399/platform.mk                |  3 ++-
 6 files changed, 50 insertions(+), 16 deletions(-)
 create mode 100644 plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.h

diff --git a/plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.c b/plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.c
index 9520bb2aa8..0d4954c62d 100644
--- a/plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.c
+++ b/plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.c
@@ -66,6 +66,7 @@ enum {
 static const struct port_info {
 	uint32_t clkgate_reg;
 	uint32_t pull_base;
+	uint32_t iomux_base;
 	uint32_t port_base;
 	/*
 	 * Selects the pull mode encoding per bank,
@@ -78,6 +79,7 @@ static const struct port_info {
 	{
 		.clkgate_reg = PMUCRU_BASE + CRU_PMU_CLKGATE_CON(1),
 		.pull_base = PMUGRF_BASE + PMUGRF_GPIO0A_P,
+		.iomux_base = PMUGRF_BASE + PMUGRF_GPIO0A_IOMUX,
 		.port_base = GPIO0_BASE,
 		.pull_enc = {ENC_ZUDZ, ENC_ZUDZ},
 		.clkgate_bit = PCLK_GPIO0_GATE_SHIFT,
@@ -85,6 +87,7 @@ static const struct port_info {
 	}, {
 		.clkgate_reg = PMUCRU_BASE + CRU_PMU_CLKGATE_CON(1),
 		.pull_base = PMUGRF_BASE + PMUGRF_GPIO1A_P,
+		.iomux_base = PMUGRF_BASE + PMUGRF_GPIO1A_IOMUX,
 		.port_base = GPIO1_BASE,
 		.pull_enc = {ENC_ZUDR, ENC_ZUDR, ENC_ZUDR, ENC_ZUDR},
 		.clkgate_bit = PCLK_GPIO1_GATE_SHIFT,
@@ -92,6 +95,7 @@ static const struct port_info {
 	}, {
 		.clkgate_reg = CRU_BASE + CRU_CLKGATE_CON(31),
 		.pull_base = GRF_BASE + GRF_GPIO2A_P,
+		.iomux_base = GRF_BASE + GRF_GPIO2A_IOMUX,
 		.port_base = GPIO2_BASE,
 		.pull_enc = {ENC_ZUDR, ENC_ZUDR, ENC_ZDZU, ENC_ZDZU},
 		.clkgate_bit = PCLK_GPIO2_GATE_SHIFT,
@@ -99,6 +103,7 @@ static const struct port_info {
 	}, {
 		.clkgate_reg = CRU_BASE + CRU_CLKGATE_CON(31),
 		.pull_base = GRF_BASE + GRF_GPIO3A_P,
+		.iomux_base = GRF_BASE + GRF_GPIO2A_IOMUX,
 		.port_base = GPIO3_BASE,
 		.pull_enc = {ENC_ZUDZ, ENC_ZUDZ, ENC_ZUDZ, ENC_ZUDZ},
 		.clkgate_bit = PCLK_GPIO3_GATE_SHIFT,
@@ -106,6 +111,7 @@ static const struct port_info {
 	}, {
 		.clkgate_reg = CRU_BASE + CRU_CLKGATE_CON(31),
 		.pull_base = GRF_BASE + GRF_GPIO4A_P,
+		.iomux_base = GRF_BASE + GRF_GPIO4A_IOMUX,
 		.port_base = GPIO4_BASE,
 		.pull_enc = {ENC_ZUDZ, ENC_ZUDZ, ENC_ZUDZ, ENC_ZUDZ},
 		.clkgate_bit = PCLK_GPIO4_GATE_SHIFT,
@@ -298,6 +304,23 @@ static void set_value(int gpio, int value)
 	gpio_put_clock(gpio, clock_state);
 }
 
+void rk3399_mux_out_gpio(int gpio) {
+	uint32_t port = GET_GPIO_PORT(gpio);
+	uint32_t bank = GET_GPIO_BANK(gpio);
+	uint32_t id = GET_GPIO_ID(gpio);
+
+	assert(port < 5U);
+	const struct port_info *info = &port_info[port];
+
+	assert(bank < info->max_bank);
+
+	/* Setting 0 is GPIO for all IOMUXes */
+	mmio_write_32(
+		info->iomux_base + 4 * bank,
+		BITS_WITH_WMASK(0, 3, id * 2)
+	);
+}
+
 void plat_rockchip_save_gpio(void)
 {
 	unsigned int i;
diff --git a/plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.h b/plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.h
new file mode 100644
index 0000000000..4d65032f81
--- /dev/null
+++ b/plat/rockchip/rk3399/drivers/gpio/rk3399_gpio.h
@@ -0,0 +1,12 @@
+/*
+ * Copyright (c) 2020, Jona Stubbe. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef RK3399_GPIO_H
+#define RK3399_GPIO_H
+
+void rk3399_mux_out_gpio(int gpio);
+
+#endif /* RK3399_GPIO_H */
diff --git a/plat/rockchip/rk3399/drivers/pmu/pmu.c b/plat/rockchip/rk3399/drivers/pmu/pmu.c
index faee6787dd..7f1d874fe4 100644
--- a/plat/rockchip/rk3399/drivers/pmu/pmu.c
+++ b/plat/rockchip/rk3399/drivers/pmu/pmu.c
@@ -1,11 +1,12 @@
 /*
- * Copyright (c) 2016-2019, ARM Limited and Contributors. All rights reserved.
+ * Copyright (c) 2016-2021, ARM Limited and Contributors. All rights reserved.
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
 
 #include <assert.h>
 #include <errno.h>
+#include <stdbool.h>
 #include <string.h>
 
 #include <platform_def.h>
@@ -28,6 +29,7 @@
 #include <pmu_com.h>
 #include <pwm.h>
 #include <rk3399_def.h>
+#include <rk3399_gpio.h>
 #include <secure.h>
 #include <soc.h>
 #include <suspend.h>
@@ -1526,11 +1528,12 @@ void __dead2 rockchip_soc_soft_reset(void)
 	if (rst_gpio) {
 		gpio_set_direction(rst_gpio->index, GPIO_DIR_OUT);
 		gpio_set_value(rst_gpio->index, rst_gpio->polarity);
+		rk3399_mux_out_gpio(rst_gpio->index);
 	} else {
 		soc_global_soft_reset();
 	}
 
-	while (1)
+	while (true)
 		;
 }
 
@@ -1540,22 +1543,15 @@ void __dead2 rockchip_soc_system_off(void)
 
 	poweroff_gpio = plat_get_rockchip_gpio_poweroff();
 
-	if (poweroff_gpio) {
-		/*
-		 * if use tsadc over temp pin(GPIO1A6) as shutdown gpio,
-		 * need to set this pin iomux back to gpio function
-		 */
-		if (poweroff_gpio->index == TSADC_INT_PIN) {
-			mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1A_IOMUX,
-				      GPIO1A6_IOMUX);
-		}
+	if (poweroff_gpio != NULL) {
 		gpio_set_direction(poweroff_gpio->index, GPIO_DIR_OUT);
 		gpio_set_value(poweroff_gpio->index, poweroff_gpio->polarity);
+		rk3399_mux_out_gpio(poweroff_gpio->index);
 	} else {
 		WARN("Do nothing when system off\n");
 	}
 
-	while (1)
+	while (true)
 		;
 }
 
diff --git a/plat/rockchip/rk3399/drivers/soc/soc.h b/plat/rockchip/rk3399/drivers/soc/soc.h
index 8daa5bb793..560e1ea608 100644
--- a/plat/rockchip/rk3399/drivers/soc/soc.h
+++ b/plat/rockchip/rk3399/drivers/soc/soc.h
@@ -145,6 +145,8 @@ struct pmu_sleep_data {
  * pmugrf reg, offset
  **************************************************/
 #define PMUGRF_OSREG(n)		(0x300 + (n) * 4)
+#define PMUGRF_GPIO0A_IOMUX	0x000
+#define PMUGRF_GPIO1A_IOMUX	0x010
 #define PMUGRF_GPIO0A_P		0x040
 #define PMUGRF_GPIO1A_P		0x050
 
@@ -250,6 +252,8 @@ struct pmu_sleep_data {
 #define GRF_USBPHY1_CTRL16	0x4540
 
 #define GRF_GPIO2A_IOMUX	0xe000
+#define GRF_GPIO3A_IOMUX	0xe010
+#define GRF_GPIO4A_IOMUX	0xe020
 #define GRF_GPIO2A_P		0xe040
 #define GRF_GPIO3A_P		0xe050
 #define GRF_GPIO4A_P		0xe060
diff --git a/plat/rockchip/rk3399/include/shared/pmu_regs.h b/plat/rockchip/rk3399/include/shared/pmu_regs.h
index 43e785e933..892d562fb0 100644
--- a/plat/rockchip/rk3399/include/shared/pmu_regs.h
+++ b/plat/rockchip/rk3399/include/shared/pmu_regs.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016, ARM Limited and Contributors. All rights reserved.
+ * Copyright (c) 2016-2021, ARM Limited and Contributors. All rights reserved.
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -64,8 +64,6 @@
 #define PMU_NOC_AUTO_ENA	0xd8
 #define PMU_PWRDN_CON1		0xdc
 
-#define PMUGRF_GPIO0A_IOMUX	0x00
-#define PMUGRF_GPIO1A_IOMUX	0x10
 #define PMUGRF_GPIO1C_IOMUX	0x18
 
 #define PMUGRF_GPIO0A6_IOMUX_SHIFT      12
diff --git a/plat/rockchip/rk3399/platform.mk b/plat/rockchip/rk3399/platform.mk
index aba67c2fe3..34e36f8917 100644
--- a/plat/rockchip/rk3399/platform.mk
+++ b/plat/rockchip/rk3399/platform.mk
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2016-2020, ARM Limited and Contributors. All rights reserved.
+# Copyright (c) 2016-2021, ARM Limited and Contributors. All rights reserved.
 #
 # SPDX-License-Identifier: BSD-3-Clause
 #
@@ -15,6 +15,7 @@ PLAT_INCLUDES		:=	-I${RK_PLAT_COMMON}/			\
 				-I${RK_PLAT_COMMON}/aarch64/		\
 				-I${RK_PLAT_COMMON}/drivers/pmu/	\
 				-I${RK_PLAT_SOC}/			\
+				-I${RK_PLAT_SOC}/drivers/gpio/		\
 				-I${RK_PLAT_SOC}/drivers/pmu/		\
 				-I${RK_PLAT_SOC}/drivers/pwm/		\
 				-I${RK_PLAT_SOC}/drivers/secure/	\
-- 
cgit v1.2.3

